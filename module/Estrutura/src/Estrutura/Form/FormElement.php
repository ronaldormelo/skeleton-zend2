<?phpnamespace Estrutura\Form;use Zend\InputFilter\InputFilter;class FormElement {    const ATTR_TITLE = 'title';    const ATTR_MASK = 'data-mask';    const ATTR_MAXLENGTH = 'maxlength';    const ATTR_MINLENGTH = 'minlength';    /**     * @var \Estrutura\Form\AbstractForm     */    protected $element;    /**     * Mínimo de registros     *     * @var int     */    protected $minimo;    /**     * Máximo de registros     *     * @var int     */    protected $maximo;    /**     * @var \Zend\InputFilter\InputFilter     */    protected $inputFilter;    public function __construct($element, \Zend\InputFilter\InputFilter $inputFilter) {        $this->element = $element;        $this->inputFilter = $inputFilter;    }    /**     * @param null $element     * @return AbstractForm     */    public function element($element = null) {        if ($element instanceof AbstractForm)            $this->element = $element;        return $this->element;    }    /**     * @param null $inputFilter     * @return InputFilter     */    public function inputFilter($inputFilter = null) {        if ($inputFilter instanceof InputFilter)            $this->inputFilter = $inputFilter;        return $this->inputFilter;    }    /**     * @param $key     * @param $value     * @return $this     */    public function setOptions($arrOptions) {        $this->element()->setOptions($arrOptions);        return $this;    }    public function getOption($key) {        return $this->element->getOption($key);    }    /**     * @param $key     * @param $value     * @return $this     */    public function setAttribute($key, $value) {        $this->element->setAttribute($key, trim($value . ' ' . $this->getAttribute($key)));        return $this;    }    public function getAttribute($key) {        return $this->element->getAttribute($key);    }    /**     * @param $label     * @return $this     */    public function label($label = null) {        if ($label === null)            return $this->element()->getLabel();        $this->element()->setLabel($label);        return $this;    }    /**     * @param null $bool     * @return $this|mixed|null     */    public function required($bool = null) {        $input = $this->inputFilter()->get($this->element()->getName());        if ($bool === null) {            return $input->isRequired();        }        $input->setRequired($bool);        if ($bool) {            $this->setAttribute('required', $bool);            $this->setAttribute('data-error', 'Campo é obrigatório.');        }        return $this;    }    /**     * @param null $maxLength     * @return $this     */    public function maxLength($maxLength = null) {        if ($maxLength === null)            return $this->getAttribute(self::ATTR_MAXLENGTH);        $this->setAttribute(self::ATTR_MAXLENGTH, $maxLength);        $this->addValidator('\Estrutura\Validator\StringLength', ['encoding' => 'UTF-8', 'max' => $maxLength]);        return $this;    }    /**     * @param null $minlength     * @return $this     */    public function minLength($minLength = null) {        if ($minLength === null)            return $this->getAttribute(self::ATTR_MINLENGTH);        $this->addValidator('\Estrutura\Validator\StringLength', ['encoding' => 'UTF-8', 'min' => $minLength]);        return $this;    }//    /**//     * @param null $element//     * @return \Zend\InputFilter\Input//     *///    public function getInputFilter($element=null)//    {//        if($element===null) $element = $this->element();//        if(!$this->inputFilter()->getInputs() || !$this->inputFilter()->get($element->getName()))//        {//            $this->inputFilter()->add(['name'=>$element->getName(),'required'=>false]);//        }//        return $this->inputFilter()->get($element->getName());//    }    /**     * @param null $bool     * @return $this     */    public function readOnly($bool = null) {        if ($bool === null)            return $this->getAttribute('readonly');        $this->setAttribute('readonly', $bool);        return $this;    }    /**     * @param $name     * @param array $options     * @return $this     */    public function addValidator($name, $options = []) {        $this->inputFilter()->get($this->element()->getName())->getValidatorChain()->attachByName($name, $options);        return $this;    }    /**     * @param $name     * @param array $options     * @return $this     */    public function addFilter($name, $options = []) {        $this->inputFilter()->get($this->element()->getName())->getFilterChain()->attachByName($name, $options);        return $this;    }    /**     * @return $this     */    public function addTextValidatorsAndFilters() {        $this->addFilter('StripTags');        $this->addFilter('StringTrim');        return $this;    }    /**     * @param null $value     * @return $this|mixed     */    public function value($value = null) {        if ($value === null)            return $this->element()->getValue();        $this->element()->setValue($value);        return $this;    }    /**     * @param null $title     * @return $this|mixed|null     */    public function title($title = null) {        if ($title === null)            return $this->element()->getAttribute(self::ATTR_TITLE);        $this->element()->setAttribute(self::ATTR_TITLE, $title);        return $this;    }    /**     * @param null $mask     * @return $this|mixed|null     */    public function mask($mask = null) {        if ($mask === null)            return $this->element()->getAttribute(self::ATTR_MASK);        $this->element()->setAttribute(self::ATTR_MASK, $mask);        return $this;    }    /**     * Em elementos Collection, determina o número máximo de registros permitidos     *     * @param $num     */    public function max($num = null) {        if ($num === null)            return $this->maximo;        $this->maximo = $num;        $this->addValidator('\Mvc\Validator\ArraySize', ['max' => $num]);        return $this;    }    /**     * Em elementos Collection, determina o número mínimo de registros permitidos     *     * @param $num     */    public function min($num = null) {        if ($num === null) {            return $this->minimo;        }        $this->minimo = $num;        $this->addValidator('\Mvc\Validator\ArraySize', ['min' => $num]);        return $this;    }}