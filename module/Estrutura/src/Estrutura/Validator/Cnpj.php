<?phpnamespace Estrutura\Validator;use Zend\Validator\AbstractValidator;use Zend\Validator\Exception;class Cnpj extends AbstractValidator{    const INVALID           = 'invalid';    const WRONG_LENGTH      = 'wrongLength';    /**     * Validation failure message template definitions     *     * @var array     */    protected $messageTemplates = array(        self::INVALID           => "O CNPJ informado é inválido",        self::WRONG_LENGTH      => "O CNPJ informado deve conter 14 números",    );    /**     * Sets validator options     *     * @param  array|Traversable $options     * @throws Exception\InvalidArgumentException     */    public function __construct($options = null)    {        parent::__construct($options);    }    /**     * Returns true if and only if $value is greater than min option     *     * @param  mixed $cpf     * @return bool     */    public function isValid($cnpj)    {        $cleaned = '';        for ($i = 0; $i < strlen($cnpj); $i++) {            $num = substr($cnpj, $i, 1);            if (ord($num) >= 48 && ord($num) <= 57) {                $cleaned .= $num;            }        }        $cnpj = $cleaned;        if (strlen($cnpj) != 14) {            $this->error(self::WRONG_LENGTH);            return false;        } elseif ($cnpj == '00000000000000') {            $this->error(self::INVALID);            return false;        } else {            $number[0]  = intval(substr($cnpj, 0, 1));            $number[1]  = intval(substr($cnpj, 1, 1));            $number[2]  = intval(substr($cnpj, 2, 1));            $number[3]  = intval(substr($cnpj, 3, 1));            $number[4]  = intval(substr($cnpj, 4, 1));            $number[5]  = intval(substr($cnpj, 5, 1));            $number[6]  = intval(substr($cnpj, 6, 1));            $number[7]  = intval(substr($cnpj, 7, 1));            $number[8]  = intval(substr($cnpj, 8, 1));            $number[9]  = intval(substr($cnpj, 9, 1));            $number[10] = intval(substr($cnpj, 10, 1));            $number[11] = intval(substr($cnpj, 11, 1));            $number[12] = intval(substr($cnpj, 12, 1));            $number[13] = intval(substr($cnpj, 13, 1));            $sum = $number[0]*5+$number[1]*4+$number[2]*3+$number[3]*2+                $number[4]*9+$number[5]*8+$number[6]*7+$number[7]*6+                $number[8]*5+$number[9]*4+$number[10]*3+$number[11]*2;            $sum -= (11*(intval($sum/11)));            if ($sum == 0 || $sum == 1) {                $result1 = 0;            } else {                $result1 = 11-$sum;            }            if ($result1 == $number[12]) {                $sum = $number[0]*6+$number[1]*5+$number[2]*4+$number[3]*3+                    $number[4]*2+$number[5]*9+$number[6]*8+$number[7]*7+                    $number[8]*6+$number[9]*5+$number[10]*4+$number[11]*3+                    $number[12]*2;                $sum -= (11*(intval($sum/11)));                if ($sum == 0 || $sum == 1) {                    $result2 = 0;                } else {                    $result2 = 11-$sum;                }                if ($result2 == $number[13]) {                    return true;                } else {                    $this->error(self::INVALID);                    return false;                }            } else {                $this->error(self::INVALID);                return false;            }        }    }}