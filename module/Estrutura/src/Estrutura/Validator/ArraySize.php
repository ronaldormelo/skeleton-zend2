<?phpnamespace Estrutura\Validator;use Zend\Validator\AbstractValidator;use Zend\Validator\Date;use Zend\Validator\DateTime;use Zend\Validator\Exception;use Zend\ValidatorTraversable;class ArraySize extends AbstractValidator{    const NOT_GREATER           = 'notGreaterThan';    const NOT_LESS              = 'notLessThanInclusive';    protected $min;    protected $max;    /**     * Validation failure message template definitions     *     * @var array     */    protected $messageTemplates = array(        self::NOT_LESS => "O %s deve conter no mínimo '%min%' valor(es)",        self::NOT_GREATER => "O %s deve conter no máximo %max% valor(es)",    );    /**     * @var array     */    protected $messageVariables = array(        'min' => 'min',        'max' => 'max'    );    /**     * Sets validator options     *     * @param  array|Traversable $options     * @throws Exception\InvalidArgumentException     */    public function __construct($options = null)    {        if ($options instanceof Traversable) {            $options = ArrayUtils::iteratorToArray($options);        }        if (!is_array($options)) {            $options = func_get_args();            $temp['min'] = array_shift($options);            $temp['max'] = array_shift($options);            $options = $temp;        }        if (!array_key_exists('min', $options)) {            $options['min'] = 0;        }        if (!array_key_exists('max', $options)) {            $options['max'] = null;        }        $this->setMin($options['min']);        $this->setMax($options['max']);        parent::__construct($options);    }    /**     * Returns the min option     *     * @return mixed     */    public function getMin()    {        return $this->min ;    }    /**     * Returns the max option     *     * @return mixed     */    public function getMax()    {        return $this->max ;    }    /**     * Sets the min option     *     * @param  mixed $min     * @return GreaterThan Provides a fluent interface     */    public function setMin($min)    {        $this->min = $min instanceof \Zend\Form\Element ? $min->getValue() : $min ;        return $this;    }    /**     * Sets the max option     *     * @param  mixed $max     * @return ArraySize Provides a fluent interface     */    public function setMax($max)    {        $this->max = $max instanceof \Zend\Form\Element ? $max->getValue() : $max ;        return $this;    }    /**     * Returns true if and only if $value is greater than min option     *     * @param  mixed $value     * @return bool     */    public function isValid($value)    {        $size = (!is_array($value)) ? 0 : count($value);        if($this->getMin())        {            if($size<$this->getMin())            {                $this->error(self::NOT_LESS);                return false;            }        }        if($this->getMax())        {            if($size>$this->getMax())            {                $this->error(self::NOT_GREATER);                return false;            }        }        return true;    }}